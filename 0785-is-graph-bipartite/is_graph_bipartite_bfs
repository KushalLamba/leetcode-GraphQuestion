bool helper(int root, vector<vector<int>>& graph, vector<int>& color) {
        color[root] = 0;
        queue<int> pendingnodes;
        pendingnodes.push(root);
        while (!pendingnodes.empty()) {
            int front = pendingnodes.front();
            pendingnodes.pop();
            for (int i = 0; i < graph[front].size(); i++) {
                int neighbour = graph[front][i];
                if (color[neighbour] == color[front])
                    return false;
                if (color[neighbour] == -1) {
                    color[neighbour] = 1-color[front];
                    pendingnodes.push(neighbour);
                }
            }
        }
        return true;
    }
    bool isBipartite(vector<vector<int>>& graph) {
        int V = graph.size();
        vector<int> color(V, -1);
        for (int i = 0; i < V; i++) {
            if (color[i] == -1 && !helper(i, graph, color)) {
                return false;
            }
        }
        return true;
    }
