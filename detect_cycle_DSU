int find(int i, vector<int> &parent)
{
    if (i == parent[i])
        return i;
    return parent[i] = find(parent[i], parent);
}
void unionf(int x, int y, vector<int> &parent, vector<int> &rank)
{
    int x_parent = find(x, parent);
    int y_parent = find(y, parent);
    if (x_parent == y_parent)
        return;
    else
    {
        if (rank[x_parent] > rank[y_parent])
            parent[y_parent] = x_parent;
        else if (rank[x_parent] < rank[y_parent])
            parent[x_parent] = y_parent;
        else
        {
            parent[y_parent] = x_parent;
            rank[x_parent]++;
        }
    }
}
int detectCycle(int V, vector<int> adj[])
{
    vector<int> parent(V, -1);
    vector<int> rank(V, 0);
    for (int i = 0; i < V; i++)
        parent[i] = i;
    for (int i = 0; i < V; i++)
    {
        for (int j = 0; j < adj[i].size(); j++)
        {
            if (i < adj[i][j])
            {
                int x_parent = find(i, parent);
                int y_parent = find(adj[i][j], parent);
                if (x_parent == y_parent)
                    return true;
                unionf(i, adj[i][j], parent, rank);
            }
        }
    }
    return false;
}
